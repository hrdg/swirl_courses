- Class: meta
  Course: R编程基础
  Lesson: R的基本构成
  Author: Nick Carchedi, Eric Wong
  Type: Standard
  Organization: GDUF
  Version: 2.2.0

- Class: text
  Output: '在此课程，我们将互动学习R编程的一些基本组成部分'

- Class: text
  Output: 如果在任何时候你想就有关特定主题的更多信息 
    为R，则可以键入help.start（）在提示符下，这将打开资源的菜单 
    （无论是在RStudio或您的默认浏览器，这取决于你的设置）。 
    另外，一个简单的网络搜索往往会产生你想要的答案。

- Class: cmd_question
  Output: 在其最简单的形式中，R可以被用作一个交互式的计算器。请输入 
    5+7，然后按Enter键。
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Type 5 + 7 and press Enter.

- Class: text
  Output: 在默认情况下,R简单地打印出12的结果。然而，R是一个编程 
    语言，我们使用的编程语言而不是一个计算器的主要原因是它可以
    自动执行某些程序或避免不必要的重复。

- Class: text
  Output: 在这种情况下，我们可能希望在后继的计算中使用我们以上的结果，
    而不是重新输入5+7，我们就可以创建一个新的变量 
    存储该结果。

- Class: text
  Output: 你给一个变量赋予一个值的方法是使用赋值 
    运算符，这仅仅是一个'小于'符号后跟一个'减'。它 
    看起来是这样的：<-

- Class: text
  Output: 赋值运算符作为箭头。左侧是被赋值的变量名，
    右侧是值或表达式。

- Class: cmd_question
  Output: 把5+7的结果赋值给一个名为x的新变量，请键入x< - 
    5+7，这可以被理解为“X=5加7”。现在尝试一下吧。
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: x <- 5+7，为了便于阅读，<-两边各一个空格 
    赋值运算符<-是个整体，在`<`和` - `中间不要有空格 


- Class: text
  Output: 注意到R没有打印12这个结果。当你 
    使用赋值运算符时，R假定您不希望马上看到结果， 
    而是认为你打算以后再使用该结果。 

- Class: cmd_question
  Output: 要查看变量x的内容，只需键入x，然后按Enter键。 
    现在尝试一下。 
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: 输入x，然后按Enter键。这将自动打印x的值。 

- Class: cmd_question
  Output: 现在，在一个名为y新的变量里存储x-3 。
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Type y <- x - 3 然后按Enter键。无论你用x - 3或X-3都可以 
    但在运算符两边输入空格是很好的习惯，
    

- Class: cmd_question
  Output: 什么是y的值？键入y来一探究竟。 
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: 键入y，然后按Enter键。 

- Class: text
  Output: 现在，让我们创建一个小的数值集合即向量。任何 
    包含数据的对象被称为数据结构，数值向量是R中最简单的 
    数据结构.事实上，即使单个数值被认为是一个长度为一的 
    向量。 

- Class: cmd_question
  Output: 最简单的方法是使用c（）函数创建一个向量，它
    代表 为“串联”或“合并”。要创建一个包含数字1.1， 9，
    和3.14的向量，输入c(1.1, 9, 3.14)。现在就来试试
    把结果存储在变量 z。 
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: 输入z <- c(1.1, 9, 3.14)将向量（1.1，9，3.14）赋给 
    最新的变量z。向量中的逗号不是必需的，但使你的代码
    更简洁，更具有可读性。 

- Class: cmd_question
  Output: 如果想了解某个函数的使用方法，你可以通过`？`命令访问R内置的
    帮助文件。例如，如果您想了解c()函数的更多信息
    键入？c ，且不需要加一个函数括号，试试看吧。 
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: 输入?c，然后按Enter键。这将打开c（）函数的帮助文件。 


- Class: cmd_question
  Output: 输入z，以查看其内容。请注意在输出的值中
    有没有逗号分隔。 
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: 键入z，然后按Enter键。 

- Class: cmd_question
  Output: 您可以将几个向量合并起来赋给一个新的向量。创建一个包含 z，555，z
    的新的向量，不要把这个向量分配给一个新的变量， 
    这样我们就可以马上看到结果。 
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: 输入 c(z, 555, z). 不要创建一个新的变量。我们只是想查看结果。 

- Class: cmd_question
  Output: '数值向量可以在算术表达式中使用。键入以下式子 
    看看会发生什么: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: 输入 z * 2 + 100, 没有将结果赋给一个变量。在`*`符号 
    用于乘法，许多键盘数字8的上面就是该运算符。 

- Class: text
  Output: 首先，z中的三个元素各自乘以2然后每个元素加上
    100。 

- Class: text
  Output: 其他常见的算术运算符 `+`, `-`, `/`, 和 `^` ( x^2
    代表 'x 的平方'). 取平方根，使用 sqrt() 函数， 取 
    绝对值，使用abs() 函数

- Class: cmd_question
  Output: 取 z - 1 的平方根，并将其赋给一个名为my_sqrt的新变量。
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: my_sqrt <- sqrt(z - 1)

- Class: mult_question
  Output: 在我们查看my_sqrt变量的内容前，你觉得它 
    包含了什么值？
  CorrectAnswer: 长度为3的向量
  AnswerChoices: 长度为3的向量;一个单一数值（即长度为1的向量）; 
    长度为0的向量（即空向量） 
  AnswerTests: omnitest(correctVal='a vector of length 3')
  Hint: '想想R如何将运算符作用于向量: 一个个元素分别处理'

- Class: cmd_question
  Output: Print the contents of my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Just type my_sqrt and press Enter to view its value.

- Class: text
  Output: As you may have guessed, R first subtracted 1 from each element of z, then
    took the square root of each element. This leaves you with a vector of the same
    length as the original vector z.

- Class: cmd_question
  Output: Now, create a new variable called my_div that gets the value of z divided
    by my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Enter my_div <- z / my_sqrt. The spaces on either side of the `/` sign are not
    required, but can often improve readability by making code appear less cluttered.
    In the end, it's personal preference.

- Class: mult_question
  Output: Which statement do you think is true?
  CorrectAnswer: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...
  AnswerChoices: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...; my_div is a single number (i.e a
    vector of length 1); my_div is undefined
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first
    element of z divided by the first element of my_sqrt, and so on...')
  Hint: Think about how R handled the other 'vectorized' operations like `+` and `*`.

- Class: cmd_question
  Output: Go ahead and print the contents of my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Type my_div and press Enter to see its contents.

- Class: text
  Output: When given two vectors of the same length, R simply performs the specified
    arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the vectors
    are of different lengths, R 'recycles' the shorter vector until it is the same
    length as the longer vector.

- Class: text
  Output: When we did z * 2 + 100 in our earlier example, z was a vector of length
    3, but technically 2 and 100 are each vectors of length 1.

- Class: text
  Output: 'Behind the scenes, R is ''recycling'' the 2 to make a vector of 2s and
    the 100 to make a vector of 100s. In other words, when you ask R to compute z
    * 2 + 100, what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100).'

- Class: cmd_question
  Output: To see another example of how this vector 'recycling' works, try adding
    c(1, 2, 3, 4) and c(0, 10). Don't worry about saving the result in a new variable.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Enter c(1, 2, 3, 4) + c(0, 10) in the console to see how R adds two vectors
    of different length. Don't assign the result to a variable.

- Class: text
  Output: If the length of the shorter vector does not divide evenly into the length
    of the longer vector, R will still apply the 'recycling' method, but will throw
    a warning to let you know something fishy might be going on.

- Class: cmd_question
  Output: Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Type c(1, 2, 3, 4) + c(0, 10, 100) to see how R handles adding two vectors,
    when the shorter vector's length does not divide evenly into the longer vector's
    length. Don't worry about assigning the result to a variable.

- Class: text
  Output: Before concluding this lesson, I'd like to show you a couple of time-saving tricks.

- Class: text
  Output: Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made a mistake and that you meant to add 1000 instead of 100. You could either re-type the expression, or...

- Class: cmd_question
  Output: In many programming environments, the up arrow will cycle through previous commands. Try hitting the up arrow on your keyboard until you get to this command (z * 2 + 100), then change 100 to 1000 and hit Enter. If the up arrow doesn't work for you, just type the corrected command.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: If your environment does not support the up arrow feature, then just type the corrected command to move on.

- Class: text
  Output: Finally, let's pretend you'd like to view the contents of a variable that you created earlier, but you can't seem to remember if you named it my_div or myDiv. You could try both and see what works, or...

- Class: cmd_question
  Output: You can type the first two letters of the variable name, then hit the Tab key (possibly more than once). Most programming environments will provide a list of variables that you've created that begin with 'my'. This is called auto-completion and can be quite handy when you have many variables in your workspace. Give it a try. (If auto-completion doesn't work for you, just type my_div and press Enter.)
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: If your programming environment doesn't support auto-completion, just type my_div and hit Enter to move on.

- Class: mult_question
  Output: Would you like to inform someone about your successful completion of this lesson?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
